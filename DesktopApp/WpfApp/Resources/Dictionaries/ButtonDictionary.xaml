<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="ColorsDictionary.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="Default" TargetType="ButtonBase">
        <Setter Property="Foreground" Value="WhiteSmoke"/>
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>
    <Style x:Key="BlueButton" TargetType="Button" BasedOn="{StaticResource Default}">
        <Setter Property="Background" Value="{StaticResource BlueButtonColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BlueButtonColorMO}"/>
            </Trigger>
            <Trigger Property="IsMouseCaptureWithin" Value="True">
                <Setter Property="Background" Value="{StaticResource BlueButtonColorMCW}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource NotEnabledColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GrayButton" TargetType="Button" BasedOn="{StaticResource Default}">
        <Setter Property="Background" Value="{StaticResource DefaultButtonColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource DefaultButtonColorMO}"/>
            </Trigger>
            <Trigger Property="IsMouseCaptureWithin" Value="True">
                <Setter Property="Background" Value="{StaticResource DefaultButtonColorMCW}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CloseButton" TargetType="Button" BasedOn="{StaticResource Default}">
        <Setter Property="Background" Value="{StaticResource DefaultButtonColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource CloseButtonColorMO}"/>
            </Trigger>
            <Trigger Property="IsMouseCaptureWithin" Value="True">
                <Setter Property="Background" Value="{StaticResource CloseButtonColorMCW}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NavbarToggleButton" TargetType="ToggleButton" BasedOn="{StaticResource Default}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource PDefaultButtonColor}"/>
                <Setter Property="IsEnabled" Value="False"/>
            </Trigger>

            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Background" Value="{StaticResource DefaultButtonColor}"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource DefaultButtonColorMO}"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseCaptureWithin" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource DefaultButtonColorMCW}"/>
            </MultiTrigger>

        </Style.Triggers>
    </Style>

    <Style x:Key="BaseRequestToggleButton" TargetType="ToggleButton" BasedOn="{StaticResource Default}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Background" Value="{StaticResource PDefaultButtonColor}"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource PDefaultButtonColorMO}"/>
            </MultiTrigger>

            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource DefaultButtonColor}"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource DefaultButtonColorMO}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RequestToggleButton" TargetType="ToggleButton" BasedOn="{StaticResource BaseRequestToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RoundedRequestButton" TargetType="ToggleButton" BasedOn="{StaticResource BaseRequestToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10, 5"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>